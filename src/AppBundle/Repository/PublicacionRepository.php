<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Empresa;
use Doctrine\ORM\EntityRepository;

/**
 * PublicacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicacionRepository extends EntityRepository {
	public function findAllByEmpresa( $empresa ) {
		$qb = $this->createQueryBuilder( 'p' );

		$qb->join( 'p.publicacionEmpresa', 'pe' );

		if ( is_integer( $empresa ) ) {
			$qb->join( 'pe.empresa', 'e' )
			   ->where( 'e.id = :empresa' )
			   ->setParameter( 'empresa', $empresa );
		} else if ( $empresa instanceof Empresa ) {
			$qb->where( 'pe.empresa = :empresa' )
			   ->setParameter( 'empresa', $empresa );
		}


		return $qb->getQuery()->getResult();

	}

	public function findActuales( $fields = null ) {


		$qb = $this->createQueryBuilder( 'p' );

		$qb->join( 'p.publicacionEmpresa', 'pe' )
		   ->join( 'pe.empresa', 'emp' );

		$qb->where( 'p.fechaInicio <= :fechaActualMax' )
		   ->andWhere( 'p.fechaFin >= :fechaActualMin' )
		   ->andWhere( 'p.publicado = true' )
		   ->orWhere( 'p.horaInicio >= :horaActual' );
		$fechaActual = new \DateTime( 'now' );

		$qb->setParameter( 'fechaActualMax', $fechaActual->format( 'Y-m-d' ) . " 23:59:59" );
		$qb->setParameter( 'fechaActualMin', $fechaActual->format( 'Y-m-d' ) . " 00:00:00" );
		$qb->setParameter( 'horaActual', $fechaActual->format( 'H:i:s' ) );

		if ( $fields ) {
			foreach ( $fields as $field ) {
				$i = $field->clase;
				if ( $i == "rubro" && $field->data ) {
					$qb->join( 'emp.empresaSubRubro', 'esr' )
					   ->join( 'esr.subRubro', 'sr' )
					   ->join( 'sr.rubro', 'r' )
					   ->orWhere( 'r.id in (:idRubros)' )
					   ->setParameter( 'idRubros', $field->data );

				}
				if ( $i == "onda" & $field->data ) {
					$qb->join( 'emp.empresaOnda', 'eo' )
					   ->join( 'eo.onda', 'o' )
					   ->orWhere( 'o.id in (:idOndas)' )
					   ->setParameter( 'idOndas', $field->data );

				}
				if ( $i == "localidad" & $field->data ) {
					$qb->join( 'emp.direccionEmpresa', 'de' )
					   ->join( 'de.direccion', 'd' )
					   ->join( 'd.localidad', 'loc' )
					   ->orWhere( 'loc.id in (:idLocalidades)' )
					   ->setParameter( 'idLocalidades', $field->data );
				}
			}
		}


		$qb->orderBy( 'p.horaInicio' );
		$qb->addOrderBy( 'emp.premium' );


		return $qb->getQuery()->getResult();
	}

	public function findActualesByEmpresa( $empresa ) {
		$qb = $this->createQueryBuilder( 'p' );


		$qb->join( 'p.publicacionEmpresa', 'pe' )
		   ->join( 'pe.empresa', 'emp' );

		$qb->where( 'p.fechaInicio <= :fechaActualMax' )
		   ->andWhere( 'p.fechaFin >= :fechaActualMin' )
		   ->andWhere( 'p.publicado = true' )
		   ->orWhere( 'p.horaInicio >= :horaActual' );

		$qb->andWhere( 'pe.empresa = :empresa' )
		   ->setParameter( 'empresa', $empresa );

		$fechaActual = new \DateTime( 'now' );
		$qb->setParameter( 'fechaActualMax', $fechaActual->format( 'Y-m-d' ) . " 23:59:59" );
		$qb->setParameter( 'fechaActualMin', $fechaActual->format( 'Y-m-d' ) . " 00:00:00" );
		$qb->setParameter( 'horaActual', $fechaActual->format( 'H:i:s' ) );


		$qb->orderBy( 'p.horaInicio' );
		$qb->addOrderBy( 'emp.premium' );


		return $qb->getQuery()->getResult();
	}

}
